variables:
 - group: azurecreds

trigger:
- master

stages:
- stage: Provision
  jobs:
  - job: TerraformTasks
    displayName: Terraform Tasks
    pool:
      vmImage: 'ubuntu-18.04'

    steps:
    #Download azurecreds.conf File
    - task: DownloadSecureFile@1
      displayName: Download azurecreds.conf file
      name: azurecreds
      inputs:
        secureFile: 'azurecreds.conf'

    # Install SSH Key for VM
    - task: InstallSSHKey@0
      displayName: Install SSH key
      inputs:
        knownHostsEntry: 'AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDwKviulfKWyTW2Hg/F/TnCaMcMovWwstIfTIxpqWZMmySfVrJJSd4ve33avntCNecfev7CZu6DgCMAbIX4vrhIxc5ZwkfRBWLGeI6mfl7vHf18ig3kUDSlnTEfFQA5AVCO9OO3n8fmfjDSI0CkHLh3ozmxSjGOmfLpgBd+R/E+8w865Kjs9EXBzHmedSlYCU9XFbxYgt8rLkY/oeVOTuiW/gW6XPHx8D6Vy8FaVVsiICPhkZWIn2ZUagNhPUVlAZT+h68IWFtHTrLesqM9O7gRMSzYAAX8KVwtme0m47rvEDQR9iBC7yGwBrzOUUwqqKX8MqQhBzfSgEjtZYW0xoTr claudio@cc-d926def3-5ff977fb44-8rbwk'
        sshKeySecureFile: 'id_rsa'

    #Terraform Install
    - task: TerraformInstaller@0
      displayName: Terraform Install
      inputs:
        terraformVersion: '1.0.1'

    #Terraform Init
    - task: TerraformTaskV2@2
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        commandOptions: '-backend-config=$(azurecreds.secureFilePath)'
        backendServiceArm: 'azurerm-sc'
        backendAzureRmResourceGroupName: 'tstate'
        backendAzureRmStorageAccountName: 'tstate25489'
        backendAzureRmContainerName: 'tstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'


    - task: AzureCLI@1
      displayName: Set Environment Variables for Terraform
      inputs:
        azureSubscription: azurerm-sc
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        addSpnToEnvironment: true
        inlineScript: |
            export ARM_CLIENT_ID=$(client_id)
            export ARM_CLIENT_SECRET=$(client_secret)
            export ARM_SUBSCRIPTION_ID=$(subscription_id)
            export ARM_TENANT_ID=$(tenant_id)
    
    #Terraform Apply
    - task: TerraformTaskV2@2
      displayName: Terraform Apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '-lock=false -auto-approve'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: 'azurerm-sc'

- stage: Build
  jobs:
  - job: build_artifacts
    displayName: Build Artifacts
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: Archive FakeRestAPI
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish FakeRestAPI artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/fakerestapi-$(Build.BuildId).zip'
        artifactName: 'drop-fakerestapi'

    - task: ArchiveFiles@2
      displayName: Archive Selenium
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'

    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium artifact
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/selenium-$(Build.BuildId).zip'
        artifactName: 'drop-selenium'

- stage: Deploy
  jobs:
  - deployment: deploy_fakerestapi
    displayName: Deploy FakeRestAPI
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'azurerm-sc'
              appType: 'webApp'
              WebAppName: 'udacitytest-AppService'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/fakerestapi-$(Build.BuildId).zip'
              DeploymentType: zipDeploy

  - deployment: VMDeploy
    displayName: Deploy Virtual Machine
    environment:
      name: TEST
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              sudo apt-get update -y
              sudo apt-get install python3-pip -y
              sudo apt-get install unzip -y
              sudo apt-get install -y chromium-browser
              sudo apt-get install -y chromium-chromedriver
              python3 -m pip install --upgrade pip
              pip3 install selenium
              # Install Log Analytics agent on Linux computers (only need to run once, comment when installed)
              # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY} -d opinsights.azure.com
            env: 
              AZURE_LOG_ANALYTICS_ID: $(la_workspace_id)
              AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(la_primary_key)
            displayName: Configure VM

- stage: Test
  jobs:
  - deployment: test_vm
    displayName: Test on Virtual Machine
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - bash: |
              cd $(Pipeline.Workspace)/drop-selenium
              unzip -o selenium-$(Build.BuildId).zip
              
              mkdir -p -v /var/log/selenium
              chmod 777 /var/log/selenium
              python3 -u selenium-test.py 2>&1 | tee -a /var/log/selenium/selenium-test.log

              cd $(System.DefaultWorkingDirectory)
              mkdir -p log/selenium
              
              cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
            displayName: Run Selenium tests
          - task: PublishPipelineArtifact@1
            displayName: Publish Selenium logs
            inputs:
              targetPath: '$(System.DefaultWorkingDirectory)/log/selenium/selenium-test.log'
              artifactName: 'drop-selenium-logs'

  - job: test_jmeter
    displayName: Test JMeter
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - bash: |
        sudo apt-get install openjdk-11-jre-headless -y
        java -version
        wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.4.tgz -O jmeter.tgz
        tar xzvf jmeter.tgz
        mkdir -p log/jmeter
      displayName: Install JMeter
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/stress-test.jmx \
                                     -l log/jmeter/stress-test-result.csv \
                                     -e -f -o log/jmeter/stress-test-html-report \
                                     -j log/jmeter/jmeter-stress-test.log
      displayName: JMeter Stress Test
    - bash: |
        apache-jmeter-5.4/bin/jmeter -n -t automatedtesting/jmeter/endurance-test.jmx \
                                     -l log/jmeter/endurance-test-result.csv \
                                     -e -f -o log/jmeter/endurance-test-html-report \
                                     -j log/jmeter/jmeter-endurance-test.log
      displayName: JMeter Endurance Test
    - task: ArchiveFiles@2
      displayName: Save JMeter Stress Test Report to Artifact
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/stress-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: ArchiveFiles@2
      displayName: Save JMeter Endurance Test Report to Artifact
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(System.DefaultWorkingDirectory)/log/jmeter/endurance-test-html-report-$(Build.BuildId).zip'
        verbose: true
    - task: PublishPipelineArtifact@1
      displayName: Publish JMeter logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/jmeter'
        artifactName: 'drop-jmeter-logs'

  - job: TestNewman
    displayName: Test Postman with Newman CLI
    pool:
      vmImage: 'ubuntu-18.04'
    steps: 
    - task: NodeTool@0
      displayName: Install Node v12.X
      inputs:
        versionSpec: '12.x'
    - bash: |
        npm install -g newman
        mkdir -p log/newman
      displayName: Install Newman CLI
    - bash: |
        newman run automatedtesting/postman/regressionTestUdacity.postman_collection.json \
                   -e automatedtesting/postman/testingenvironment.postman_environment.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/regressionTestUdacity.xml \
                   --suppress-exit-code
      displayName: Run Regression Test
    - bash: |
        newman run automatedtesting/postman/validationTestUdacity.postman_collection.json \
                   -e automatedtesting/postman/testingenvironment.postman_environment.json \
                   --reporters cli,junit \
                   --reporter-junit-export log/newman/validationTestUdacity.xml \
                   --suppress-exit-code
      displayName: Run Validation Test
    - task: PublishPipelineArtifact@1
      displayName: Publish Newman logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log/newman'
        artifactName: 'drop-newman-logs'
    - task: PublishTestResults@2
      displayName: 'Publish Postman Test Results'
      inputs:
        testRunner: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/log/newman'
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: 'Postman Test Results'

#- stage: Destroy
#  jobs:
#  - job: destroy_azure_infrastructure
#    displayName: Destroy Azure Infrastructure
#   pool:
#    vmImage: 'ubuntu-18.04'
#    steps:
#    
#    #Download azurecreds.conf File
#    - task: DownloadSecureFile@1
#      displayName: Download azurecreds.conf file
#      name: azurecreds
#      inputs:
#        secureFile: 'azurecreds.conf'
#
#    # Install SSH Key for VM
#    - task: InstallSSHKey@0
#      displayName: Install SSH key
#      inputs:
#        knownHostsEntry: 'known_hosts'
#        sshPublicKey: $(public_key)
#        sshKeySecureFile: 'id_rsa'
#
#    #Terraform Install
#    - task: TerraformInstaller@0
#      displayName: Terraform Install
#      inputs:
#        terraformVersion: '1.0.1'
#
#    #Terraform Init
#    - task: TerraformTaskV2@2
#      displayName: Terraform Init
#      inputs:
#        provider: 'azurerm'
#        command: 'init'
#        commandOptions: '-backend-config=$(azurecreds.secureFilePath)'
#        backendServiceArm: 'azurerm-sc'
#        backendAzureRmResourceGroupName: 'tstate'
#        backendAzureRmStorageAccountName: 'tstate25489'
#        backendAzureRmContainerName: 'tstate'
#        backendAzureRmKey: 'test.terraform.tfstate'
#        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#
#    - task: TerraformTaskV2@2
#      displayName: Terraform Destroy
#      inputs:
#        provider: 'azurerm'
#        command: 'destroy'
#        commandOptions: |
#          -auto-approve 
#        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
#        environmentServiceNameAzureRM: 'azurerm-sc'
